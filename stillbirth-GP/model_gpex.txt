model{  

      for(c in 1:niso){
      # data
      for (i in 1:n.c[c]){
      y.ci[c,i] ~ dnorm(G[gett.ci[c,i],c],nu.ci[c,i])

      nu.ci[c,i] <- pow((se.ci[c,i]^2+sigma.y[source.ci[c,i]]^2), -1)
      }
      G[1:nyears.c[c],c] ~ dmnorm(mu.g[1:nyears.c[c],c],Sigma.inv[1:nyears.c[c],1:nyears.c[c],c]) ## gaussian process
      Sigma.inv[1:nyears.c[c],1:nyears.c[c],c] <- inverse(Sigma[1:nyears.c[c],1:nyears.c[c],c]) ##Var-Covar Matrix
      beta[c] ~ dnorm(mu.beta[region.c[c]], tau.beta[region.c[c]])
      

        for(t in 1:nyears.c[c]){
          Sigma[t,t,c] <- pow(tau.g[c],-1) + 0.00001  ##avoids issue of non positive definite matrix
         

        for(j in (t+1):nyears.c[c]) {
          Sigma[t,j,c]<- pow(tau.g[c],-1)*(pow(p[c],pow(Dist[t,j,c],kappa)))
          Sigma[j,t,c] <- Sigma[t,j,c]
        } #End j loop
        } #End t loop
          p[c]~dnorm(mu.p[region.c[c]],tau.p[region.c[c]])T(0,1)
          tau.g[c]<-pow(sigma.g[c],-2)
          sigma.g[c] <- exp(logsigma.g[c])
          logsigma.g[c] ~ dnorm(chi[region.c[c]], psi[region.c[c]])
        } #end c
          for(r in 1:nregions){
          mu.p[r] ~ dnorm(mu.p.global, tau.p.global)
          tau.p[r] <- pow(sigma.p[r], -2)
          sigma.p[r] ~ dunif(0, 40)
          chi[r] ~ dnorm(chi.global, tau.chi.global)
          psi[r] <- pow(sigma.psi[r],-2)
          sigma.psi[r] ~ dunif(0,40)
          }
          mu.p.global ~ dnorm(0, 0.01)
          tau.p.global <- pow(sigma.p.global, -2)
          sigma.p.global ~ dunif(0, 40)

          chi.global ~ dnorm(0, 0.01)
          tau.chi.global <- pow(sigma.chi.global, -2)
          sigma.chi.global ~ dunif(0, 40)
          

      for(r in 1:nregions){
      mu.beta[r] ~ dnorm(mu.beta.global, tau.beta.global)
      tau.beta[r] <- pow(sigma.beta[r], -2)
      sigma.beta[r] ~ dunif(0, 40)
      }
      mu.beta.global ~ dnorm(0, 0.01)
      tau.beta.global <- pow(sigma.beta.global, -2)
      sigma.beta.global ~ dunif(0, 40)
      

        for(c in 1:niso){
        for(t in 1:nyears.c[c]){
        mu.g[t,c] <- beta[c]
        }
  }
        

        for(s in 1:nsources){
        sigma.y[s] ~ dunif(0,40)
        }
        
} # end model 
